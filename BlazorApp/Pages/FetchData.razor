

@implements IDisposable
@inject IJSRuntime JsRuntime;
@inject NavigationManager Navigator;

@if (IsOnline)
{
    @Online
}
else
{
    @Offline
}

@code {

    [Parameter]
    public RenderFragment Online { get; set; }

    [Parameter]
    public RenderFragment Offline { get; set; }

    public bool IsOnline { get; set; }

    public bool FirstRender{ get; set; }

    [JSInvokable("Connection.StatusChanged")]
    public void OnConnectionStatusChanged(bool isOnline)
    {
        if (IsOnline != isOnline)
        {
            IsOnline = isOnline;

            if (isOnline && FirstRender)
            {
                FirstRender = false;
                Navigator.NavigateTo("./",true,true);
            }
        }

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FirstRender = true;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        JsRuntime.InvokeVoidAsync("Connection.Initialize", DotNetObjectReference.Create(this));
    }

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("Connection.Dispose");
    }
}